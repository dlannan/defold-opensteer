
local peds = require("example_crowd.pedestrian")
local debugdrawing = peds.debugdraw_modes[1]

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/camera#camera", "acquire_camera_focus")

	pedestrianSetup(100)
	self.cam_select = 0
	self.soldier_select = 1
	self.turnSpeed = 5.0
	self.debug = 0
	
	pprint(#peds.all.crowd)

	self.soldiers = {}
	for i=1, #peds.all.crowd do 
		local ped = peds.all.crowd[i]
		local pos = ped.mover.position()
		local p = vmath.vector3( pos.x, pos.y, pos.z )
		
		local ctype = "people_men"
		if(math.random() > 0.5) then ctype = "people_women" end		
		local soldier = factory.create("/people#"..ctype, p, nil, { health = 10 }, 2.0)
		
		local model_url = msg.url(nil, soldier, "model")
		go.set(model_url, "cursor", math.random())
		go.set_scale(0.1, soldier)
		table.insert(self.soldiers, soldier )
	end 
end

function final(self)
end

local function updatePerson(self) 
	local soldier = self.soldiers[self.soldier_select]
	msg.post("/soldier_obj", "set_parent", { parent_id = soldier, keep_world_transform = 0 })
	msg.post("@render:", "use_camera_projection")
end

function update(self, dt)

	peds.updater(dt)

	-- When updating characters it is probably sensible to add in:
	--   View frustum culling for current camera 
	--   Near field culling. No need to update all objects in the distance (visually)
	--   Additionally, if you do want to do distance objects, should pool into different levels of update rates
	--      to maximize performance. Ie: near objects per frame, mid distance 10Hz and distance 5Hz or slower. 
	--  For extremely large numbers of objects the above will be important to provide a decent fps.

	for i=1, #peds.all.crowd do 
		local ped = peds.all.crowd[i]
		local pos = ped.mover.position()
		local fwd = ped.mover.forward()
		ped.mover.angle = math.atan2(fwd.z, fwd.x)
		local rot = vmath.quat_rotation_x(-math.pi * 0.5) * vmath.quat_rotation_z( -ped.mover.angle + math.pi * 0.5 )
		local soldierpos = vmath.vector3(pos.x, pos.y, pos.z)
		
		go.set_position( soldierpos * peds.all.scale, self.soldiers[i])
		local newrot = vmath.slerp(dt * self.turnSpeed, go.get_rotation(self.soldiers[i]), rot)
		go.set_rotation( newrot, self.soldiers[i])
	end

	local person = peds.all.crowd[self.soldier_select]
	debugdrawing.text("SELECTED: "..self.soldier_select, 10, 30, vmath.vector4(0, 0.5, 1, 1))
	debugdrawing.text("NEIGHTBORS: "..#person.neighbors, 120, 30, vmath.vector4(0, 0.5, 1, 1))	
	debugdrawing.text("SPEED: "..string.format("%2.2f", person.mover.speed()), 250, 30,vmath.vector4(0, 0.5, 1, 1))	
	debugdrawing.text("MAXFORCE: "..string.format("%2.2f", person.mover.maxForce()), 360, 30,vmath.vector4(0, 0.5, 1, 1))	
	debugdrawing.text("MASS: "..string.format("%2.2f", person.mover.mass()), 490, 30,vmath.vector4(0, 0.5, 1, 1))	
	debugdrawing.text("DIR: "..string.format("%3.2f(DEG)", math.deg(person.mover.angle)), 600, 30,vmath.vector4(0, 0.5, 1, 1))	
end

function fixed_update(self, dt)
end

function on_input(self, action_id, action)
	if(action_id == hash("cam_switch") and action.released ) then 
		self.cam_select = 1-self.cam_select
		if(self.cam_select == 0) then 
			msg.post("/camera#camera", "acquire_camera_focus")
		else 
			msg.post("/soldier_cam#camera", "acquire_camera_focus")
		end
	end

	if(action_id == hash("soldier_select") and action.released ) then 
		self.soldier_select  = self.soldier_select + 1
		if(self.soldier_select > #peds.all.crowd) then self.soldier_select = 1 end
	end

	if(action_id == hash("toggle_debug") and action.released ) then 
		self.debug = 1 - self.debug
		peds.debugEnable(self.debug)
		print(self.debug)
	end
		
	updatePerson(self)
end

function on_reload(self)
end
